    --- DISCOVERY SERVER--- pom.xml

   Bu bağımlılık, Netflix tarafından geliştirilen Eureka isimli bir hizmet keşif (service discovery)
    sunucusunu entegre etmenizi sağlar.Eureka Server, bir servisin kaydedildiği (register) ve başka bir
    servisin bu kayıtları sorgulayarak diğer servisi bulduğu (discovery) bir sistem sağlar.
    Bu, servislerin IP adresleri veya bağlantı noktaları gibi detaylara doğrudan bağlı kalmadan birbirleriyle
    iletişim kurabilmelerini sağlar:

    	<dependency>
    		<groupId>org.springframework.cloud</groupId>
    		<artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
    	</dependency>


    --- DISCOVERY SERVER--- application.java

        @SpringBootApplication
        @EnableEurekaServer  <--- Eureka Server'ı aktif hale getiriyoruz
        public class DiscoveryServerApplication {

        	public static void main(String[] args) {
        		SpringApplication.run(DiscoveryServerApplication.class, args);
        	}

        }



      --- DISCOVERY SERVER--- application.properties

        eureka.instance.hostname=localhost <--- Eureka Server'a kaydedilen servislerin hostname'larını belirtir
        eureka.client.register-with-eureka=false <--- Eureka Server örneğinin kendisini Eureka Server'a kaydedip kaydetmeyeceğini belirler. "false" değeri, bu Eureka Server'ın kendi kendini kaydetmeyeceği anlamına gelir
        eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka/  <--- Eureka Server'ın kendisini kaydettiği (register) veya diğer servislerin kayıtlarını sorguladığı (discovery) Eureka Server'ın URL'sini belirtir
        eureka.client.fetch-registry=false <--- "false" değeri, bu Eureka Server'ın diğer servislerin kayıtlarını almaya çalışmayacağı anlamına gelir
        server.port=8761 <---  Eureka Server 8761 numaralı port üzerinde çalışacaktır.

      --- CAR SERVICE --- pom.xml

        pring Boot tabanlı bir mikro servis uygulamasını
        Eureka Server'a kaydetmek ve diğer servisleri Eureka Server üzerinden keşfetmek için kullanılır:

            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
            </dependency>

        --- RENTAL SERVICE --- pom.xml

        pring Boot tabanlı bir mikro servis uygulamasını
        Eureka Server'a kaydetmek ve diğer servisleri Eureka Server üzerinden keşfetmek için kullanılır:

            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
            </dependency>

        --- CAR SERVICE ---  application.properties

        eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
        spring.application.name=car-service
        management.endpoints.web.exposure.include=info

        --- RENTAL SERVICE ---  application.properties

        eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
        spring.application.name=rental-service
        management.endpoints.web.exposure.include=info


---> Projemize Entities ve DTO'ları ekliyoruz. DTO'lar request ve response şeklinde ikiye ayrılmıştır.

    Car.java

    @AllArgsConstructor <--  Bütün alanları içeren bir parametreli constructor ekler
    @NoArgsConstructor <--  Parametresiz bir constructor ekler.
    @Builder <-- Builder deseni kullanarak nesne oluşturmayı sağlayan bir builder sınıfı oluşturur
    @Data <-- Getter ve Setter işlemlerini yapmamızı sağlar
    @Document(value = "cars") <-- MongoDB'de cars collection içerisine kaydediliyor
    public class Car {
        @Id
        private String id;
        private String modelId;
        private Date modelYear;
        private double dailyPrice;
        private String color;
        private String plate;  <-- DTO'larda regex ile plaka formatında veri alınıyor.
        //private List<String> imagesUrls;
    }


---> Ardından business/abstracts altında BrandService, CarService, ModelService'ler oluşturuldu.

        public interface CarService {
            List<GetAllCarResponse> getAll();
            GetCarResponse getById(String id);
            CreateCarResponse create(CreateCarRequest carRequest);
            UpdateCarResponse update(String id, UpdateCarRequest carRequest);
            void delete(String id);
        }

        public interface BrandService {
            List<GetAllBrandResponse> getAll();
            GetBrandResponse getById(String id);
            CreateBrandResponse add(CreateBrandRequest request);
            UpdateBrandResponse update(String id, UpdateBrandRequest request);
            void delete(String id);
        }

        public interface ModelService {
            List<GetAllModelResponse> getAll();
            GetModelResponse getById(String id);
            CreateModelResponse add(CreateModelRequest request);
            UpdateModelResponse update(String id, UpdateModelRequest request);
            void delete(String id);
        }


---> Projemizde business/conceretes altında BrandManager, CarManager, ModelManager dosyalarını ekledik.

     Bu manager dosyaları servislerden implement olarak, ordaki methodları içermektedir.

---> Veritabanı ile ilgili işlemleri gerçekleştireceğimiz repository'leri oluşturuyoruz.
     Bu repository'lerde veritabanı olarak MongoDB kullandığımız için MongoRepository'den extends olacak.

     public interface BrandRepository extends MongoRepository<Brand, String> {

     }

     public interface CarRepository extends MongoRepository<Car, String> {

     }

     public interface ModelRepository extends MongoRepository<Model, String> {

     }

--> Manager kısmına geçmeden önce Exception dosyalarımızı oluşturalım.

    core/exceptions:

        @RestControllerAdvice
        public class GlobalExceptionHandlers {
            @ExceptionHandler({ MethodArgumentNotValidException.class }) <-- HTTP isteğinin belirli bir metodu çağırırken parametre doğrulama hatası olması
            public List<String> handleValidationException(MethodArgumentNotValidException ex){
                List<String> errors = new ArrayList<>();
                ex.getBindingResult().getAllErrors().forEach((error) -> {
                    String fieldName = ((FieldError)error).getField();
                    String errorMessage = error.getDefaultMessage();
                    String message = fieldName + ":" + errorMessage;
                    errors.add(message);
                });
                return errors;
            }

            @ExceptionHandler({BusinessException.class})
            @ResponseStatus(HttpStatus.BAD_REQUEST)
            public String handleBusinessException(BusinessException ex){ <-- Uygulama içinde ortaya çıkabilecek özel iş hataları için
                return ex.getMessage();
            }
        }

    business/exceptions:  --> Business işlemlerinde ortaya çıkan belirli bir durumu temsil eden hataları ifade etmek içindir

        public class BusinessException extends RuntimeException{

            public BusinessException(String message) {
                super(message);
            }
        }

--> Manager Dosyaları

    Model Mapper:
        Model mapper kütüphanesi sayesinde,
        modeller arasında dönüşümlerde haritalandırmayı manuel olarak değil, otomatik yapıyoruz.

    pom.xml

        <dependency>
        	<groupId>org.modelmapper</groupId>
        	<artifactId>modelmapper</artifactId>
        	<version>3.1.1</version>
        </dependency

    core/config:

        ModelMapperConfiguration.java

            public class ModelMapperConfiguration {
                @Bean <-- Tüm uygulamada ModelMapper methodunu kullanmamızı sağlıyor
                public ModelMapper modelMapper(){
                    var mapper =  new ModelMapper();
                    mapper.getConfiguration()
                    .setAmbiguityIgnored(true) <-- model eşleştirmesi sırasında belirsizlik durumlarını görmezden
                    .setMatchingStrategy(MatchingStrategies.STRICT);
                    return mapper;
                }
            }


    --- CAR MANAGER ---


CREATE TABLE rentals (
    id UUID PRIMARY KEY,
    car_id VARCHAR(255) NOT NULL,
    customer_id UUID
    started_date TIMESTAMP NOT NULL,
    end_date TIMESTAMP NOT NULL,
    is_rental_process_continue BOOLEAN NOT NULL
);


--- FEIGN CLIENT ---

Feign Nedir?

    Feign, Spring Cloud tarafından desteklenen bir HTTP istemci kütüphanesidir ve
    mikroservis mimarilerinde servisler arası iletişimi kolaylaştırmak için kullanılmaktadır.

    pom.xml: (Rental ve Car Service)

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>

car-service:
    maven clean - install
    docker build -t halilibrahimtas/car-service .
    docker push halilibrahimtas/car-service

discovery-server:
    maven clean - install
    docker build -t halilibrahimtas/discovery-server .
    docker push halilibrahimtas/discovery-server

rental-service:
    maven clean - install
    docker build -t halilibrahimtas/rental-service .
    docker push halilibrahimtas/rental-service

api-gateway:
    maven clean - install
    docker build -t halilibrahimtas/api-gateway .
    docker push halilibrahimtas/api-gateway


rental-service - error:

    Please refer to C:\Microservices\clone-rent-a-car\microservices-rent-a-car-clone\rental-service\target\surefire-reports for the individual test results.
    Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream.

    pom.xml - plugins:


---CLOUDINARY---

    <dependency>
        <groupId>com.cloudinary</groupId>
        <artifactId>cloudinary-http44</artifactId>
        <version>1.27.0</version>
    </dependency>


CREATE TABLE customers (
    id UUID PRIMARY KEY,
    first_name VARCHAR(255),
    last_name VARCHAR(255),
    email VARCHAR(255),
    password VARCHAR(255),
    balance DOUBLE PRECISION,
    birth_date DATE
);